var searchIndex = {};
searchIndex["arrayref"] = {"doc":"This package contains just four macros, which enable the creation of array references to portions of arrays or slices (or things that can be sliced).","items":[[14,"array_ref","arrayref","You can use `array_ref` to generate an array reference to a subset of a sliceable bit of data (which could be an array, or a slice, or a Vec).",null,null],[14,"array_refs","","You can use `array_refs` to generate a series of array references to an input array reference.  The idea is if you want to break an array into a series of contiguous and non-overlapping arrays. `array_refs` is a bit funny in that it insists on slicing up the entire array.  This is intentional, as I find it handy to make me ensure that my sub-arrays add up to the entire array.  This macro will never panic, since the sizes are all checked at compile time.",null,null],[14,"mut_array_refs","","You can use `mut_array_refs` to generate a series of mutable array references to an input mutable array reference.  The idea is if you want to break an array into a series of contiguous and non-overlapping mutable array references.  Like `array_refs!`, `mut_array_refs!` is a bit funny in that it insists on slicing up the entire array.  This is intentional, as I find it handy to make me ensure that my sub-arrays add up to the entire array. This macro will never panic, since the sizes are all checked at compile time.",null,null],[14,"array_mut_ref","","You can use `array_mut_ref` to generate a mutable array reference to a subset of a sliceable bit of data (which could be an array, or a slice, or a Vec).",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",1,null],[11,"read_u32","","",1,null],[11,"read_u64","","",1,null],[11,"read_uint","","",1,null],[11,"write_u16","","",1,null],[11,"write_u32","","",1,null],[11,"write_u64","","",1,null],[11,"write_uint","","",1,null],[11,"read_u16_into","","",1,null],[11,"read_u32_into","","",1,null],[11,"read_u64_into","","",1,null],[11,"write_u16_into","","",1,null],[11,"write_u32_into","","",1,null],[11,"write_u64_into","","",1,null],[11,"from_slice_u16","","",1,null],[11,"from_slice_u32","","",1,null],[11,"from_slice_u64","","",1,null],[11,"from_slice_f32","","",1,null],[11,"from_slice_f64","","",1,null],[11,"read_u16","","",2,null],[11,"read_u32","","",2,null],[11,"read_u64","","",2,null],[11,"read_uint","","",2,null],[11,"write_u16","","",2,null],[11,"write_u32","","",2,null],[11,"write_u64","","",2,null],[11,"write_uint","","",2,null],[11,"read_u16_into","","",2,null],[11,"read_u32_into","","",2,null],[11,"read_u64_into","","",2,null],[11,"write_u16_into","","",2,null],[11,"write_u32_into","","",2,null],[11,"write_u64_into","","",2,null],[11,"from_slice_u16","","",2,null],[11,"from_slice_u32","","",2,null],[11,"from_slice_u64","","",2,null],[11,"from_slice_f32","","",2,null],[11,"from_slice_f64","","",2,null]],"paths":[[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cast"] = {"doc":"Ergonomic, checked cast functions for primitive types","items":[[4,"Error","cast","Cast errors",null,null],[13,"Infinite","","Infinite value casted to a type that can only represent finite values",0,null],[13,"NaN","","NaN value casted to a type that can't represent a NaN value",0,null],[13,"Overflow","","Source value is greater than the maximum value that the destination type can hold",0,null],[13,"Underflow","","Source value is smaller than the minimum value that the destination type can hold",0,null],[5,"f32","","Checked cast function",null,null],[5,"f64","","Checked cast function",null,null],[5,"i8","","Checked cast function",null,null],[5,"i16","","Checked cast function",null,null],[5,"i32","","Checked cast function",null,null],[5,"i64","","Checked cast function",null,null],[5,"isize","","Checked cast function",null,null],[5,"u8","","Checked cast function",null,null],[5,"u16","","Checked cast function",null,null],[5,"u32","","Checked cast function",null,null],[5,"u64","","Checked cast function",null,null],[5,"usize","","Checked cast function",null,null],[8,"From","","The \"cast from\" operation",null,null],[16,"Output","","The result of the cast operation: either `Self` or `Result<Self, Error>`",1,null],[10,"cast","","Checked cast from `Src` to `Self`",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[8,"From"]]};
searchIndex["hash32"] = {"doc":"32-bit hashing machinery","items":[[3,"FnvHasher","hash32","32-bit Fowler-Noll-Vo hasher",null,null],[3,"Murmur3Hasher","","32-bit MurmurHash3 hasher",null,null],[3,"BuildHasherDefault","","See [`core::hash::BuildHasherDefault`][0] for details",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write","","",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write","","",1,null],[8,"BuildHasher","","See [`core::hash::BuildHasher`][0] for details",null,null],[16,"Hasher","","See [`core::hash::BuildHasher::Hasher`][0]",2,null],[10,"build_hasher","","See [`core::hash::BuildHasher.build_hasher`][0]",2,null],[8,"Hasher","","See [`core::hash::Hasher`][0] for details",null,null],[10,"finish","","See [`core::hash::Hasher.finish`][0]",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"write","","See [`core::hash::Hasher.write`][0]",3,null],[8,"Hash","","See [`core::hash::Hash`][0] for details",null,null],[10,"hash","","Feeds this value into the given `Hasher`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash_slice","","Feeds a slice of this type into the given `Hasher`.",4,null],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"build_hasher","","",5,null]],"paths":[[3,"FnvHasher"],[3,"Murmur3Hasher"],[8,"BuildHasher"],[8,"Hasher"],[8,"Hash"],[3,"BuildHasherDefault"]]};
searchIndex["hash32_derive"] = {"doc":"","items":[[5,"derive_hash32","hash32_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["jnet"] = {"doc":"JNeT: japaric's network thingies","items":[[3,"Buffer","jnet","Buffer that owns a (statically sized) chunk of memory and provides a slice view into it",null,null],[4,"Unknown","","[Type State] Unknown",null,null],[4,"Valid","","[Type State] Valid checksum",null,null],[4,"Invalid","","[Type State] Invalid checksum",null,null],[11,"new","","Creates a new buffer from the given chunk of memory",0,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"reset","","Resets the slice view to span the full length of the `Chunk`",0,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Truncates the buffer to the specified length",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"free","","Frees the chunk of memory",0,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"slice_from","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"truncate","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[0,"ether","","Ethernet II",null,null],[3,"Frame","jnet::ether","Layer 2 Ethernet frame",null,null],[4,"Type","","Ether Type",null,null],[13,"Ipv4","","IPv4",1,null],[13,"Arp","","ARP",1,null],[13,"Ipv6","","IPv6",1,null],[13,"Unknown","","Unknown",1,null],[17,"HEADER_SIZE","","Size of the MAC header",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Creates a new Ethernet frame from the given buffer",2,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"parse","","Parses bytes into an Ethernet frame",2,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"get_destination","","Returns the Destination field of the header",2,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"get_source","","Returns the Source field of the header",2,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"get_type","","Returns the Type field of the header",2,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"payload","","View into the payload",2,null],[11,"as_bytes","","Returns the byte representation of this frame",2,null],[11,"free","","Frees the underlying buffer",2,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"len","","Returns the length (header + data) of this frame",2,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_destination","","Sets the destination field of the header",2,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"set_source","","Sets the source field of the header",2,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"set_type","","Sets the type field of the header",2,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"payload_mut","","Mutable view into the payload",2,null],[11,"truncate","","Truncates the payload of this frame to the specified length",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"into_payload","","Returns the payload of this frame",2,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"arp","","Fills the payload with an ARP packet",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"ipv4","","Fills the payload with an IPv4 packet",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"type"}}],[0,"mac","jnet","MAC: Medium Access Control",null,null],[3,"Addr","jnet::mac","MAC address",null,null],[12,"0","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"addr"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"addr"}],"output":{"name":"bool"}}],[18,"BROADCAST","","Broadcast address",3,null],[11,"is_broadcast","","Checks if this is the broadcast address",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Checks if this is a multicast address",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"arp","jnet","ARP: Address Resolution Protocol",null,null],[3,"Packet","jnet::arp","ARP packet",null,null],[4,"Ethernet","","[Type state] The Ethernet hardware type",null,null],[4,"Ipv4","","[Type state] The IPv4 protocol type",null,null],[4,"HardwareType","","Hardware type",null,null],[13,"Ethernet","","Ethernet",4,null],[13,"Unknown","","Unknown",4,null],[4,"Operation","","ARP operation",null,null],[13,"Request","","Request operation",5,null],[13,"Reply","","Reply operation",5,null],[13,"Unknown","","Unknown",5,null],[17,"HEADER_SIZE","","Size of the ARP header",null,null],[11,"new","","Transforms the given buffer into an ARP packet",6,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"get_sha","","Returns the SHA (Sender Hardware Address) field of the payload",6,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"get_spa","","Returns the SPA (Sender Protocol Address) field of the payload",6,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"get_tha","","Returns the THA (Target Hardware Address) field of the payload",6,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"get_tpa","","Returns the TPA (Target Protocol Address) field of the payload",6,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"is_a_probe","","Is this an ARP probe?",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_sha","","Sets the SHA (Sender Hardware Address) field of the payload",6,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"set_spa","","Sets the SPA (Sender Protocol Address) field of the payload",6,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"set_tha","","Sets the THA (Target Hardware Address) field of the payload",6,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"set_tpa","","Sets the TPA (Target Protocol Address) field of the payload",6,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"announce","","ARP announcement",6,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"probe","","ARP probe",6,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"get_sha","","Returns the SHA (Sender Hardware Address) field of the payload",6,null],[11,"get_spa","","Returns the SPA (Sender Protocol Address) field of the payload",6,null],[11,"get_tha","","Returns the THA (Target Hardware Address) field of the payload",6,null],[11,"get_tpa","","Returns the TPA (Target Protocol Address) field of the payload",6,null],[11,"downcast","","Interprets this packet as `Packet<Ethernet, Ipv4>`",6,{"inputs":[{"name":"self"}],"output":{"generics":["packet"],"name":"result"}}],[11,"parse","","Parses bytes into an ARP packet",6,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"set_htype","","Sets the HTYPE (Hardware TYPE) field of the header",6,{"inputs":[{"name":"self"},{"name":"hardwaretype"}],"output":null}],[11,"set_ptype","","Sets the PTYPE (Protocol TYPE) field of the header",6,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"try_from","","",6,{"inputs":[{"generics":["unknown","unknown"],"name":"packet"}],"output":{"generics":["packet"],"name":"result"}}],[11,"get_htype","","Returns the HTYPE (Hardware TYPE) field of the header",6,{"inputs":[{"name":"self"}],"output":{"name":"hardwaretype"}}],[11,"get_ptype","","Returns the PTYPE (Protocol TYPE) field of the header",6,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_hlen","","Returns the HLEN (Hardware LENgth) field of the header",6,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_plen","","Returns the PLEN (Protocol LENgth) field of the header",6,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_oper","","Returns the OPER (OPERation) field of the header",6,{"inputs":[{"name":"self"}],"output":{"name":"operation"}}],[11,"payload","","View into the payload",6,null],[11,"len","","Returns the length (header + data) of this packet",6,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"free","","Frees the underlying buffer",6,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"set_oper","","Sets the OPER (OPERation) field of the header",6,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"payload_mut","","Mutable view into the payload",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"hardwaretype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"hardwaretype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"hardwaretype"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"u16"}],"output":{"name":"hardwaretype"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"operation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"operation"}}],[0,"ipv4","jnet","IPv4: Internet Protocol v4",null,null],[3,"Packet","jnet::ipv4","IPv4 packet",null,null],[3,"Addr","","IPv4 address",null,null],[12,"0","","",7,null],[4,"Protocol","","IP protocol",null,null],[13,"Udp","","UDP",8,null],[13,"Icmp","","ICMP",8,null],[13,"Unknown","","Unknown",8,null],[17,"MIN_HEADER_SIZE","","Minimum size of the IPv4 header",null,null],[11,"parse","","Parses bytes into an IPv4 packet",9,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"get_version","","Returns the version field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_ihl","","Returns the IHL (Internet Header Length) field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_dscp","","Returns the DSCP (Differentiated Services Code Point) field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_ecn","","Returns the ECN (Explicit Congestion Notification) field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_total_length","","Returns the total length field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"len","","Returns the length (header + data) of this packet",9,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_identification","","Returns the identification field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_df","","Returns the DF (Don't Fragment) field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_mf","","Returns the MF (More Fragments) field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_fragment_offset","","Returns the Fragment Offset field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_ttl","","Returns the TTL (Time To Live) field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_protocol","","Returns the protocol field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"get_source","","Returns the Source (IP address) field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"get_destination","","Returns the Destination (IP address) field of the header",9,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"payload","","View into the payload",9,null],[11,"payload_mut","","View into the payload",9,null],[11,"into_payload","","Returns the payload of this frame",9,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"new","","Transforms the given buffer into an IPv4 packet",9,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"echo_request","","Fills the payload with an Echo Request ICMP packet",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"udp","","Fills the payload with an UDP packet",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"truncate","","Truncates the payload to the specified length",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"truncate","","Truncates the payload to the specified length",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_version","","Sets the version field of the header",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"set_dscp","","Sets the DSCP (Differentiated Services Code Point) field of the header",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"set_ecn","","Sets the ECN (Explicit Congestion Notification) field of the header",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"set_identification","","Sets the identification field of the header",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"set_df","","Sets the DF (Don't Fragment) field of the header",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_mf","","Sets the MF (More Fragments) field of the header",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_fragment_offset","","Sets the Fragment Offset field of the header",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"set_ttl","","Sets the TTL (Time To Live) field of the header",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"set_protocol","","Sets the Protocol field of the header",9,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":null}],[11,"set_source","","Sets the Source (IP address) field of the header",9,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"set_destination","","Sets the Destination (IP address) field of the header",9,{"inputs":[{"name":"self"},{"name":"addr"}],"output":null}],[11,"update_checksum","","Updates the Checksum field of the header",9,{"inputs":[{"name":"self"}],"output":{"generics":["valid"],"name":"packet"}}],[11,"set_version","","Sets the version field of the header",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_dscp","","Sets the DSCP (Differentiated Services Code Point) field of the header",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_ecn","","Sets the ECN (Explicit Congestion Notification) field of the header",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_identification","","Sets the identification field of the header",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_df","","Sets the DF (Don't Fragment) field of the header",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_mf","","Sets the MF (More Fragments) field of the header",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_fragment_offset","","Sets the Fragment Offset field of the header",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_ttl","","Sets the TTL (Time To Live) field of the header",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_protocol","","Sets the Protocol field of the header",9,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_source","","Sets the Source (IP address) field of the header",9,{"inputs":[{"name":"self"},{"name":"addr"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"set_destination","","Sets the Destination (IP address) field of the header",9,{"inputs":[{"name":"self"},{"name":"addr"}],"output":{"generics":["invalid"],"name":"packet"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"addr"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"addr"}],"output":{"name":"bool"}}],[18,"LOOPBACK","","Loopback address",7,null],[18,"UNSPECIFIED","","Unspecified address",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"from","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"protocol"}}],[0,"icmp","jnet","ICMP: Internet Control Message Protocol",null,null],[3,"Packet","jnet::icmp","ICMP packet",null,null],[4,"EchoReply","","[Type State] The Echo Reply type",null,null],[4,"EchoRequest","","[Type State] The Echo Request type",null,null],[4,"Type","","ICMP types",null,null],[13,"EchoReply","","Echo Reply",10,null],[13,"DestinationUnreachable","","Destination Unreachable",10,null],[13,"EchoRequest","","Echo Request",10,null],[13,"Unknown","","Unknown",10,null],[17,"HEADER_SIZE","","Size of the ICMP header",null,null],[11,"new","","Transforms the input buffer into a Echo Request ICMP packet",11,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"get_identifier","","Returns the Identifier field of the header",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_sequence_number","","Returns the Identifier field of the header",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_identifier","","Returns the Identifier field of the header",11,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"set_sequence_number","","Returns the Identifier field of the header",11,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"parse","","Parses the input bytes into a",11,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"set_type","","Sets the Type field of the header",11,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"set_code","","Sets the Code field of the header",11,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"set_type","","Sets the Type field of the header",11,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["unknown","invalid"],"name":"packet"}}],[11,"set_code","","Sets the Code field of the header",11,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["unknown","invalid"],"name":"packet"}}],[11,"downcast","","Downcasts this packet with unknown type into a specific type",11,{"inputs":[{"name":"self"}],"output":{"generics":["packet"],"name":"result"}}],[11,"from","","",11,{"inputs":[{"generics":["echorequest"],"name":"packet"}],"output":{"name":"self"}}],[11,"try_from","","",11,{"inputs":[{"generics":["unknown"],"name":"packet"}],"output":{"generics":["packet"],"name":"result"}}],[11,"try_from","","",11,{"inputs":[{"generics":["unknown"],"name":"packet"}],"output":{"generics":["packet"],"name":"result"}}],[11,"get_type","","Returns the Type field of the header",11,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_code","","Returns the Type field of the header",11,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"payload","","View into the payload",11,null],[11,"len","","Returns the length (header + data) of this packet",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"as_bytes","","Returns the byte representation of this packet",11,null],[11,"payload_mut","","Mutable view into the payload",11,null],[11,"update_checksum","","Updates the Checksum field of the header",11,{"inputs":[{"name":"self"}],"output":{"generics":["valid"],"name":"packet"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"type"}}],[0,"udp","jnet","UDP: User Datagram Protocol",null,null],[3,"Packet","jnet::udp","UDP packet",null,null],[17,"HEADER_SIZE","","Size of the UDP header",null,null],[11,"parse","","Parses the bytes as an UDP packet",12,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"get_source","","Returns the Source (port) field of the header",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_destination","","Returns the Destination (port) field of the header",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_length","","Returns the Length field of the header",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"len","","Returns the length (header + data) of this packet",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"payload","","View into the payload",12,null],[11,"as_bytes","","Returns the byte representation of this UDP packet",12,null],[11,"set_source","","Sets the Source (port) field of the header",12,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"set_destination","","Sets the Destination (port) field of the header",12,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"zero_checksum","","Zeroes the Checksum field of the header",12,{"inputs":[{"name":"self"}],"output":null}],[11,"payload_mut","","Mutable view into the payload",12,null],[11,"new","","Transforms the given buffer into an UDP packet",12,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"set_payload","","Fills the payload with the given data and adjusts the length of the UDP packet",12,null],[11,"coap","","Fills the payload with a CoAP message",12,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"f"}],"output":null}],[11,"truncate","","Truncates the payload to the specified length",12,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"coap","jnet","CoAP: Constrained Application Protocol",null,null],[3,"Message","jnet::coap","CoAP (version 1) message",null,null],[3,"Option","","A CoAP option",null,null],[3,"Options","","Iterator over the options of a CoAP message",null,null],[3,"Code","","CoAP Code",null,null],[4,"Type","","CoAP Type",null,null],[13,"Confirmable","","Confirmable message",13,null],[13,"NonConfirmable","","Non-confirmable message",13,null],[13,"Acknowledgement","","Acknowledgement message",13,null],[13,"Reset","","Reset message",13,null],[4,"Method","","CoAP Method Codes",null,null],[13,"Get","","GET",14,null],[13,"Post","","POST",14,null],[13,"Put","","PUT",14,null],[13,"Delete","","DELETE",14,null],[4,"Response","","CoAP Response Codes",null,null],[13,"Created","","Created",15,null],[13,"Deleted","","Deleted",15,null],[13,"Valid","","Valid",15,null],[13,"Changed","","Changed",15,null],[13,"Content","","Content",15,null],[13,"BadRequest","","Bad Request",15,null],[13,"Unauthorized","","Unauthorized",15,null],[13,"BadOption","","Bad Option",15,null],[13,"Forbidden","","Forbidden",15,null],[13,"NotFound","","Not Found",15,null],[13,"MethodNotAllowed","","Method Not Allowed",15,null],[13,"NotAcceptable","","Not Acceptable",15,null],[13,"PreconditionFailed","","Precondition Failed",15,null],[13,"RequestEntityTooLarge","","Request Entity Too Large",15,null],[13,"UnsupportedContentFormat","","Unsupported Content-Format",15,null],[13,"InternalServerError","","Internal Server Error",15,null],[13,"NotImplemented","","Not Implemented",15,null],[13,"BadGateway","","Bad Gateway",15,null],[13,"ServiceUnavailable","","Service Unavailable",15,null],[13,"GatewayTimeout","","Gateway Timeout",15,null],[13,"ProxyingNotSupported","","Proxying Not Supported",15,null],[4,"OptionNumber","","CoAP Option Numbers",null,null],[13,"Reserved0","","Reserved",16,null],[13,"IfMatch","","If-Match",16,null],[13,"UriHost","","Uri-Host",16,null],[13,"ETag","","ETag",16,null],[13,"IfNoneMatch","","If-None-Patch",16,null],[13,"UriPort","","Uri-Port",16,null],[13,"LocationPath","","Location-Path",16,null],[13,"UriPath","","Uri-Path",16,null],[13,"ContentFormat","","Content-Format",16,null],[13,"MaxAge","","Max-Age",16,null],[13,"UriQuery","","Uri-Query",16,null],[13,"Accept","","Accept",16,null],[13,"LocationQuery","","Location-Query",16,null],[13,"ProxyUri","","Proxy-Uri",16,null],[13,"ProxyScheme","","Proxy-Scheme",16,null],[13,"Size1","","Size1",16,null],[13,"Reserved1","","Reserved",16,null],[13,"Reserved2","","Reserved",16,null],[13,"Reserved3","","Reserved",16,null],[13,"Reserved4","","Reserved",16,null],[13,"Unknown","","Unknown",16,null],[4,"ContentFormat","","CoAP Content-Formats",null,null],[13,"TextPlain","","text/plain; charset=utf-8",17,null],[13,"ApplicationLinkFormat","","application/link-format",17,null],[13,"ApplicationXml","","application/xml",17,null],[13,"ApplicationOctetStream","","application/octet-stream",17,null],[13,"ApplicationExi","","application/exi",17,null],[13,"ApplicationJson","","application/json",17,null],[13,"Unknown","","Unknown",17,null],[17,"PORT","","CoAP default UDP port",null,null],[17,"HEADER_SIZE","","Size of a CoAP header",null,null],[11,"parse","","Parses bytes into a CoAP message",18,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"get_version","","Returns the Version field of the header",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_type","","Returns the Type field of the header",18,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_token_length","","Returns the Token Length (TKL) field of the header",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_code","","Returns the Code field of the header",18,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"get_message_id","","Returns the Message ID field of the header",18,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"token","","View into the Token field of the header",18,null],[11,"options","","Returns an iterator over the options of this message",18,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"payload","","View into the payload",18,null],[11,"len","","Returns the length (header + data) of the CoAP message",18,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"as_bytes","","Returns the byte representation of this message",18,null],[11,"new","","Transforms the given buffer into a CoAP message",18,{"inputs":[{"name":"b"},{"name":"u8"}],"output":{"name":"self"}}],[11,"add_option","","Adds an option to this message",18,null],[11,"clear_options","","Removes all the options this message has",18,{"inputs":[{"name":"self"}],"output":null}],[11,"token_mut","","Mutable view into the Token field",18,null],[11,"payload_mut","","Mutable view into the payload",18,null],[11,"set_code","","Sets the Code field of the header",18,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"set_message_id","","Sets the Message ID field of the header",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"set_type","","Sets the Type field of the header",18,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"truncate","","Truncates the payload to the specified length",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"set_payload","","Fills the payload with the given data and adjusts the length of the CoAP message",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"number","","Returns the number of this option",19,{"inputs":[{"name":"self"}],"output":{"name":"optionnumber"}}],[11,"value","","Returns the value of this option",19,null],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"coreoption"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"into","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[18,"EMPTY","","Empty message",21,null],[11,"class","","Returns the class of this code",21,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"detail","","Returns the detail of this code",21,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"is_request","","Checks if this is a request code",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_response","","Checks if this is a reponse code",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"from","","",21,{"inputs":[{"name":"method"}],"output":{"name":"code"}}],[11,"try_from","","",14,{"inputs":[{"name":"code"}],"output":{"generics":["method"],"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"response"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"from","","",21,{"inputs":[{"name":"response"}],"output":{"name":"code"}}],[11,"try_from","","",15,{"inputs":[{"name":"code"}],"output":{"generics":["response"],"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"optionnumber"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"optionnumber"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"optionnumber"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"optionnumber"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"optionnumber"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"optionnumber"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"optionnumber"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"optionnumber"}],"output":{"name":"bool"}}],[11,"from","","",16,{"inputs":[{"name":"u16"}],"output":{"name":"optionnumber"}}],[11,"is_critical","","Is this a critical option?",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_elective","","Is this an elective option?",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unsafe","","Is this option UnSafe to forward?",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"contentformat"}}],[8,"Resize","jnet","A buffer that can be resized in place",null,null],[10,"slice_from","","Slices the buffer in place",22,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[10,"truncate","","Truncates the buffer to the specified length",22,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}]],"paths":[[3,"Buffer"],[4,"Type"],[3,"Frame"],[3,"Addr"],[4,"HardwareType"],[4,"Operation"],[3,"Packet"],[3,"Addr"],[4,"Protocol"],[3,"Packet"],[4,"Type"],[3,"Packet"],[3,"Packet"],[4,"Type"],[4,"Method"],[4,"Response"],[4,"OptionNumber"],[4,"ContentFormat"],[3,"Message"],[3,"Option"],[3,"Options"],[3,"Code"],[8,"Resize"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","",null,null],[3,"LexError","","",null,null],[3,"Span","","",null,null],[3,"Group","","",null,null],[3,"Op","","",null,null],[3,"Term","","",null,null],[3,"Literal","","",null,null],[4,"TokenTree","","",null,null],[13,"Group","","",0,null],[13,"Term","","",0,null],[13,"Op","","",0,null],[13,"Literal","","",0,null],[4,"Delimiter","","",null,null],[13,"Parenthesis","","",1,null],[13,"Brace","","",1,null],[13,"Bracket","","",1,null],[13,"None","","",1,null],[4,"Spacing","","",null,null],[13,"Alone","","",2,null],[13,"Joint","","",2,null],[0,"token_stream","","",null,null],[3,"IntoIter","proc_macro2::token_stream","",null,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","proc_macro2","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"call_site","","",6,{"inputs":[],"output":{"name":"span"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"group"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"term"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"op"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"literal"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"new","","",7,{"inputs":[{"name":"delimiter"},{"name":"tokenstream"}],"output":{"name":"group"}}],[11,"delimiter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"stream","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"span","","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",7,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"char"},{"name":"spacing"}],"output":{"name":"op"}}],[11,"op","","",8,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"spacing","","",8,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"span","","",8,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",8,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"new","","",9,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"term"}}],[11,"as_str","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","",9,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"u8_suffixed","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_suffixed","","",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_suffixed","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_suffixed","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_suffixed","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_suffixed","","",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_suffixed","","",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_suffixed","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_suffixed","","",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_suffixed","","",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"u8_unsuffixed","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_unsuffixed","","",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_unsuffixed","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_unsuffixed","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_unsuffixed","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_unsuffixed","","",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_unsuffixed","","",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_unsuffixed","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_unsuffixed","","",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_unsuffixed","","",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"f64_unsuffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64_suffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32_unsuffixed","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"f32_suffixed","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",10,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",10,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",10,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Op"],[3,"Term"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[3,"Tokens","quote","Tokens produced by a [`quote!`] invocation.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"tokens"}}],[11,"new","","Empty tokens.",0,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"into_iter","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}]],"paths":[[3,"Tokens"],[8,"ToTokens"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Attribute","syn","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",13,null],[12,"expr","","",13,null],[12,"bracket_token","","",13,null],[12,"index","","",13,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",14,null],[12,"lit","","",14,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",15,null],[12,"paren_token","","",15,null],[12,"expr","","",15,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",16,null],[12,"qself","","",16,null],[12,"path","","",16,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",17,null],[12,"op","","",17,null],[12,"expr","","",17,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",18,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",19,null],[12,"span","","",19,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",20,null],[12,"lt_token","","",20,null],[12,"lifetimes","","",20,null],[12,"gt_token","","",20,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",21,null],[12,"const_token","","",21,null],[12,"ident","","",21,null],[12,"colon_token","","",21,null],[12,"ty","","",21,null],[12,"eq_token","","",21,null],[12,"default","","",21,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",22,null],[12,"params","","",22,null],[12,"gt_token","","",22,null],[12,"where_clause","","",22,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",23,null],[12,"lifetime","","",23,null],[12,"colon_token","","",23,null],[12,"bounds","","",23,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",24,null],[12,"eq_token","","",24,null],[12,"rhs_ty","","",24,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",25,null],[12,"colon_token","","",25,null],[12,"bounds","","",25,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",26,null],[12,"bounded_ty","","The type being bounded",26,null],[12,"colon_token","","",26,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",26,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",27,null],[12,"modifier","","",27,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",27,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",27,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",28,null],[12,"ident","","",28,null],[12,"colon_token","","",28,null],[12,"bounds","","",28,null],[12,"eq_token","","",28,null],[12,"default","","",28,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",29,null],[12,"predicates","","",29,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",30,null],[12,"span","","",30,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",31,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",32,null],[12,"bang_token","","",32,null],[12,"delimiter","","",32,null],[12,"tts","","",32,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",33,null],[12,"brace_token","","",33,null],[12,"variants","","",33,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",34,null],[12,"fields","","",34,null],[12,"semi_token","","",34,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",35,null],[12,"fields","","",35,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",36,null],[12,"vis","","Visibility of the struct or enum.",36,null],[12,"ident","","Name of the struct or enum.",36,null],[12,"generics","","Generics required to complete the definition.",36,null],[12,"data","","Data within the struct or enum.",36,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",37,null],[12,"name","","",37,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",38,null],[12,"ty","","",38,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",39,null],[12,"elem","","",39,null],[12,"semi_token","","",39,null],[12,"len","","",39,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",40,null],[12,"abi","","",40,null],[12,"fn_token","","",40,null],[12,"lifetimes","","",40,null],[12,"paren_token","","",40,null],[12,"inputs","","",40,null],[12,"variadic","","",40,null],[12,"output","","",40,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",41,null],[12,"elem","","",41,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",42,null],[12,"bounds","","",42,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",43,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",44,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",45,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",46,null],[12,"elem","","",46,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",47,null],[12,"path","","",47,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",48,null],[12,"const_token","","",48,null],[12,"mutability","","",48,null],[12,"elem","","",48,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",49,null],[12,"lifetime","","",49,null],[12,"mutability","","",49,null],[12,"elem","","",49,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",50,null],[12,"elem","","",50,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",51,null],[12,"bounds","","",51,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",52,null],[12,"elems","","",52,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",53,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",54,null],[12,"lt_token","","",54,null],[12,"args","","",54,null],[12,"gt_token","","",54,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",55,null],[12,"eq_token","","",55,null],[12,"ty","","",55,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",56,null],[12,"inputs","","`(A, B)`",56,null],[12,"output","","`C`",56,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",57,null],[12,"segments","","",57,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",58,null],[12,"arguments","","",58,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",59,null],[12,"ty","","",59,null],[12,"position","","",59,null],[12,"as_token","","",59,null],[12,"gt_token","","",59,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",60,null],[12,"1","","",60,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",61,null],[13,"Inner","","",61,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",62,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",62,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",62,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",63,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",63,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",64,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",64,null],[13,"Unit","","Unit struct or unit variant such as `None`.",64,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",65,null],[13,"Crate","","A crate-level visibility: `crate`.",65,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",65,null],[13,"Inherited","","An inherited visibility, which usually means private.",65,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",66,null],[13,"InPlace","","A placement expression: `place <- value`.",66,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",66,null],[13,"Call","","A function call expression: `invoke(a, b)`.",66,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",66,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",66,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",66,null],[13,"Unary","","A unary operation: `!x`, `*x`.",66,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",66,null],[13,"Cast","","A cast expression: `foo as f64`.",66,null],[13,"Type","","A type ascription expression: `foo: f64`.",66,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",66,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",66,null],[13,"While","","A while loop: `while expr { ... }`.",66,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",66,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",66,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",66,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",66,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",66,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",66,null],[13,"Block","","A blocked scope: `{ ... }`.",66,null],[13,"Assign","","An assignment expression: `a = compute()`.",66,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",66,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",66,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",66,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",66,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",66,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",66,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",66,null],[13,"Continue","","A `continue`, with an optional label.",66,null],[13,"Return","","A `return`, with an optional value to be returned.",66,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",66,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",66,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",66,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",66,null],[13,"Group","","An expression contained within invisible delimiters.",66,null],[13,"Try","","A try-expression: `expr?`.",66,null],[13,"Catch","","A catch expression: `do catch { ... }`.",66,null],[13,"Yield","","A yield expression: `yield expr`.",66,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",66,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",67,null],[13,"Unnamed","","An unnamed field like `self.0`.",67,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",68,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",68,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",68,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",69,null],[13,"Maybe","","",69,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",70,null],[13,"Lifetime","","",70,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",71,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",71,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",71,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",72,null],[13,"F64","","",72,null],[13,"None","","",72,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",73,null],[13,"I16","","",73,null],[13,"I32","","",73,null],[13,"I64","","",73,null],[13,"I128","","",73,null],[13,"Isize","","",73,null],[13,"U8","","",73,null],[13,"U16","","",73,null],[13,"U32","","",73,null],[13,"U64","","",73,null],[13,"U128","","",73,null],[13,"Usize","","",73,null],[13,"None","","",73,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",74,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",74,null],[13,"Byte","","A byte literal: `b'f'`.",74,null],[13,"Char","","A character literal: `'a'`.",74,null],[13,"Int","","An integer literal: `1` or `1u16`.",74,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",74,null],[13,"Bool","","A boolean literal: `true` or `false`.",74,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",74,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",75,null],[13,"Raw","","A raw string like `r##\"data\"##`.",75,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",76,null],[13,"Brace","","",76,null],[13,"Bracket","","",76,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",77,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",77,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",77,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",78,null],[13,"Sub","","The `-` operator (subtraction)",78,null],[13,"Mul","","The `*` operator (multiplication)",78,null],[13,"Div","","The `/` operator (division)",78,null],[13,"Rem","","The `%` operator (modulus)",78,null],[13,"And","","The `&&` operator (logical and)",78,null],[13,"Or","","The `||` operator (logical or)",78,null],[13,"BitXor","","The `^` operator (bitwise xor)",78,null],[13,"BitAnd","","The `&` operator (bitwise and)",78,null],[13,"BitOr","","The `|` operator (bitwise or)",78,null],[13,"Shl","","The `<<` operator (shift left)",78,null],[13,"Shr","","The `>>` operator (shift right)",78,null],[13,"Eq","","The `==` operator (equality)",78,null],[13,"Lt","","The `<` operator (less than)",78,null],[13,"Le","","The `<=` operator (less than or equal to)",78,null],[13,"Ne","","The `!=` operator (not equal to)",78,null],[13,"Ge","","The `>=` operator (greater than or equal to)",78,null],[13,"Gt","","The `>` operator (greater than)",78,null],[13,"AddEq","","The `+=` operator",78,null],[13,"SubEq","","The `-=` operator",78,null],[13,"MulEq","","The `*=` operator",78,null],[13,"DivEq","","The `/=` operator",78,null],[13,"RemEq","","The `%=` operator",78,null],[13,"BitXorEq","","The `^=` operator",78,null],[13,"BitAndEq","","The `&=` operator",78,null],[13,"BitOrEq","","The `|=` operator",78,null],[13,"ShlEq","","The `<<=` operator",78,null],[13,"ShrEq","","The `>>=` operator",78,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",79,null],[13,"Not","","The `!` operator for logical inversion",79,null],[13,"Neg","","The `-` operator for negation",79,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",80,null],[13,"Wild","","Argument not given a name, matched with `_`.",80,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",81,null],[13,"Type","","A particular type is returned.",81,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",82,null],[13,"Array","","A fixed size array type: `[T; n]`.",82,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",82,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",82,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",82,null],[13,"Never","","The never type: `!`.",82,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",82,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",82,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",82,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",82,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",82,null],[13,"Group","","A type contained within invisible delimiters.",82,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",82,null],[13,"Macro","","A macro in the type position.",82,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",82,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",83,null],[13,"Type","","A type argument.",83,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",83,null],[13,"Const","","A const expression. Must be inside of a block.",83,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",84,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",84,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",84,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Add","syn::token","`+`",null,null],[12,"0","","",85,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",86,null],[3,"And","","`&`",null,null],[12,"0","","",87,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",88,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",89,null],[3,"At","","`@`",null,null],[12,"0","","",90,null],[3,"Bang","","`!`",null,null],[12,"0","","",91,null],[3,"Caret","","`^`",null,null],[12,"0","","",92,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",93,null],[3,"Colon","","`:`",null,null],[12,"0","","",94,null],[3,"Colon2","","`::`",null,null],[12,"0","","",95,null],[3,"Comma","","`,`",null,null],[12,"0","","",96,null],[3,"Div","","`/`",null,null],[12,"0","","",97,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",98,null],[3,"Dot","","`.`",null,null],[12,"0","","",99,null],[3,"Dot2","","`..`",null,null],[12,"0","","",100,null],[3,"Dot3","","`...`",null,null],[12,"0","","",101,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",102,null],[3,"Eq","","`=`",null,null],[12,"0","","",103,null],[3,"EqEq","","`==`",null,null],[12,"0","","",104,null],[3,"Ge","","`>=`",null,null],[12,"0","","",105,null],[3,"Gt","","`>`",null,null],[12,"0","","",106,null],[3,"Le","","`<=`",null,null],[12,"0","","",107,null],[3,"Lt","","`<`",null,null],[12,"0","","",108,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",109,null],[3,"Ne","","`!=`",null,null],[12,"0","","",110,null],[3,"Or","","`|`",null,null],[12,"0","","",111,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",112,null],[3,"OrOr","","`||`",null,null],[12,"0","","",113,null],[3,"Pound","","`#`",null,null],[12,"0","","",114,null],[3,"Question","","`?`",null,null],[12,"0","","",115,null],[3,"RArrow","","`->`",null,null],[12,"0","","",116,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",117,null],[3,"Rem","","`%`",null,null],[12,"0","","",118,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",119,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",120,null],[3,"Semi","","`;`",null,null],[12,"0","","",121,null],[3,"Shl","","`<<`",null,null],[12,"0","","",122,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",123,null],[3,"Shr","","`>>`",null,null],[12,"0","","",124,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",125,null],[3,"Star","","`*`",null,null],[12,"0","","",126,null],[3,"Sub","","`-`",null,null],[12,"0","","",127,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",128,null],[3,"Underscore","","`_`",null,null],[12,"0","","",129,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",130,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",131,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",132,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",133,null],[3,"As","","`as`",null,null],[12,"0","","",134,null],[3,"Auto","","`auto`",null,null],[12,"0","","",135,null],[3,"Box","","`box`",null,null],[12,"0","","",136,null],[3,"Break","","`break`",null,null],[12,"0","","",137,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",138,null],[3,"Catch","","`catch`",null,null],[12,"0","","",139,null],[3,"Const","","`const`",null,null],[12,"0","","",140,null],[3,"Continue","","`continue`",null,null],[12,"0","","",141,null],[3,"Crate","","`crate`",null,null],[12,"0","","",142,null],[3,"Default","","`default`",null,null],[12,"0","","",143,null],[3,"Do","","`do`",null,null],[12,"0","","",144,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",145,null],[3,"Else","","`else`",null,null],[12,"0","","",146,null],[3,"Enum","","`enum`",null,null],[12,"0","","",147,null],[3,"Extern","","`extern`",null,null],[12,"0","","",148,null],[3,"Fn","","`fn`",null,null],[12,"0","","",149,null],[3,"For","","`for`",null,null],[12,"0","","",150,null],[3,"If","","`if`",null,null],[12,"0","","",151,null],[3,"Impl","","`impl`",null,null],[12,"0","","",152,null],[3,"In","","`in`",null,null],[12,"0","","",153,null],[3,"Let","","`let`",null,null],[12,"0","","",154,null],[3,"Loop","","`loop`",null,null],[12,"0","","",155,null],[3,"Macro","","`macro`",null,null],[12,"0","","",156,null],[3,"Match","","`match`",null,null],[12,"0","","",157,null],[3,"Mod","","`mod`",null,null],[12,"0","","",158,null],[3,"Move","","`move`",null,null],[12,"0","","",159,null],[3,"Mut","","`mut`",null,null],[12,"0","","",160,null],[3,"Pub","","`pub`",null,null],[12,"0","","",161,null],[3,"Ref","","`ref`",null,null],[12,"0","","",162,null],[3,"Return","","`return`",null,null],[12,"0","","",163,null],[3,"Self_","","`self`",null,null],[12,"0","","",164,null],[3,"Static","","`static`",null,null],[12,"0","","",165,null],[3,"Struct","","`struct`",null,null],[12,"0","","",166,null],[3,"Super","","`super`",null,null],[12,"0","","",167,null],[3,"Trait","","`trait`",null,null],[12,"0","","",168,null],[3,"Type","","`type`",null,null],[12,"0","","",169,null],[3,"Union","","`union`",null,null],[12,"0","","",170,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",171,null],[3,"Use","","`use`",null,null],[12,"0","","",172,null],[3,"Where","","`where`",null,null],[12,"0","","",173,null],[3,"While","","`while`",null,null],[12,"0","","",174,null],[3,"Yield","","`yield`",null,null],[12,"0","","",175,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"new","","",85,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",85,{"inputs":[{"name":"cursor"}],"output":{"generics":["add"],"name":"presult"}}],[11,"description","","",85,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",85,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"addeq"}}],[11,"new","","",86,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",86,{"inputs":[{"name":"cursor"}],"output":{"generics":["addeq"],"name":"presult"}}],[11,"description","","",86,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",86,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"and"}}],[11,"new","","",87,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",87,{"inputs":[{"name":"cursor"}],"output":{"generics":["and"],"name":"presult"}}],[11,"description","","",87,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",87,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"andand"}}],[11,"new","","",88,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",88,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",88,{"inputs":[{"name":"cursor"}],"output":{"generics":["andand"],"name":"presult"}}],[11,"description","","",88,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",88,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"andeq"}}],[11,"new","","",89,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",89,{"inputs":[{"name":"cursor"}],"output":{"generics":["andeq"],"name":"presult"}}],[11,"description","","",89,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",89,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"at"}}],[11,"new","","",90,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",90,{"inputs":[{"name":"cursor"}],"output":{"generics":["at"],"name":"presult"}}],[11,"description","","",90,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",90,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bang"}}],[11,"new","","",91,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",91,{"inputs":[{"name":"cursor"}],"output":{"generics":["bang"],"name":"presult"}}],[11,"description","","",91,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",91,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"caret"}}],[11,"new","","",92,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",92,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",92,{"inputs":[{"name":"cursor"}],"output":{"generics":["caret"],"name":"presult"}}],[11,"description","","",92,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",92,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"careteq"}}],[11,"new","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",93,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",93,{"inputs":[{"name":"cursor"}],"output":{"generics":["careteq"],"name":"presult"}}],[11,"description","","",93,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"colon"}}],[11,"new","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",94,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",94,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon"],"name":"presult"}}],[11,"description","","",94,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"colon2"}}],[11,"new","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",95,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",95,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon2"],"name":"presult"}}],[11,"description","","",95,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"comma"}}],[11,"new","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",96,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",96,{"inputs":[{"name":"cursor"}],"output":{"generics":["comma"],"name":"presult"}}],[11,"description","","",96,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"new","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",97,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",97,{"inputs":[{"name":"cursor"}],"output":{"generics":["div"],"name":"presult"}}],[11,"description","","",97,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"diveq"}}],[11,"new","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",98,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",98,{"inputs":[{"name":"cursor"}],"output":{"generics":["diveq"],"name":"presult"}}],[11,"description","","",98,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"dot"}}],[11,"new","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",99,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",99,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot"],"name":"presult"}}],[11,"description","","",99,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"dot2"}}],[11,"new","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",100,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",100,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot2"],"name":"presult"}}],[11,"description","","",100,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"dot3"}}],[11,"new","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",101,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",101,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot3"],"name":"presult"}}],[11,"description","","",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"dotdoteq"}}],[11,"new","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",102,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",102,{"inputs":[{"name":"cursor"}],"output":{"generics":["dotdoteq"],"name":"presult"}}],[11,"description","","",102,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"eq"}}],[11,"new","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",103,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",103,{"inputs":[{"name":"cursor"}],"output":{"generics":["eq"],"name":"presult"}}],[11,"description","","",103,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"eqeq"}}],[11,"new","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",104,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",104,{"inputs":[{"name":"cursor"}],"output":{"generics":["eqeq"],"name":"presult"}}],[11,"description","","",104,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"ge"}}],[11,"new","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",105,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",105,{"inputs":[{"name":"cursor"}],"output":{"generics":["ge"],"name":"presult"}}],[11,"description","","",105,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"new","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",106,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",106,{"inputs":[{"name":"cursor"}],"output":{"generics":["gt"],"name":"presult"}}],[11,"description","","",106,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"le"}}],[11,"new","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",107,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",107,{"inputs":[{"name":"cursor"}],"output":{"generics":["le"],"name":"presult"}}],[11,"description","","",107,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"lt"}}],[11,"new","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",108,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",108,{"inputs":[{"name":"cursor"}],"output":{"generics":["lt"],"name":"presult"}}],[11,"description","","",108,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"muleq"}}],[11,"new","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",109,{"inputs":[{"name":"cursor"}],"output":{"generics":["muleq"],"name":"presult"}}],[11,"description","","",109,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"ne"}}],[11,"new","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",110,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",110,{"inputs":[{"name":"cursor"}],"output":{"generics":["ne"],"name":"presult"}}],[11,"description","","",110,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"new","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",111,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",111,{"inputs":[{"name":"cursor"}],"output":{"generics":["or"],"name":"presult"}}],[11,"description","","",111,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"oreq"}}],[11,"new","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",112,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",112,{"inputs":[{"name":"cursor"}],"output":{"generics":["oreq"],"name":"presult"}}],[11,"description","","",112,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"oror"}}],[11,"new","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",113,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",113,{"inputs":[{"name":"cursor"}],"output":{"generics":["oror"],"name":"presult"}}],[11,"description","","",113,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"pound"}}],[11,"new","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",114,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",114,{"inputs":[{"name":"cursor"}],"output":{"generics":["pound"],"name":"presult"}}],[11,"description","","",114,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"new","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",115,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",115,{"inputs":[{"name":"cursor"}],"output":{"generics":["question"],"name":"presult"}}],[11,"description","","",115,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"rarrow"}}],[11,"new","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",116,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",116,{"inputs":[{"name":"cursor"}],"output":{"generics":["rarrow"],"name":"presult"}}],[11,"description","","",116,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"larrow"}}],[11,"new","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",117,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",117,{"inputs":[{"name":"cursor"}],"output":{"generics":["larrow"],"name":"presult"}}],[11,"description","","",117,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"rem"}}],[11,"new","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",118,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",118,{"inputs":[{"name":"cursor"}],"output":{"generics":["rem"],"name":"presult"}}],[11,"description","","",118,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"remeq"}}],[11,"new","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",119,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",119,{"inputs":[{"name":"cursor"}],"output":{"generics":["remeq"],"name":"presult"}}],[11,"description","","",119,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"fatarrow"}}],[11,"new","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",120,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",120,{"inputs":[{"name":"cursor"}],"output":{"generics":["fatarrow"],"name":"presult"}}],[11,"description","","",120,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"new","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",121,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",121,{"inputs":[{"name":"cursor"}],"output":{"generics":["semi"],"name":"presult"}}],[11,"description","","",121,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"shl"}}],[11,"new","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",122,{"inputs":[{"name":"cursor"}],"output":{"generics":["shl"],"name":"presult"}}],[11,"description","","",122,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"shleq"}}],[11,"new","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",123,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",123,{"inputs":[{"name":"cursor"}],"output":{"generics":["shleq"],"name":"presult"}}],[11,"description","","",123,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"shr"}}],[11,"new","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",124,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",124,{"inputs":[{"name":"cursor"}],"output":{"generics":["shr"],"name":"presult"}}],[11,"description","","",124,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"shreq"}}],[11,"new","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",125,{"inputs":[{"name":"cursor"}],"output":{"generics":["shreq"],"name":"presult"}}],[11,"description","","",125,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"new","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",126,{"inputs":[{"name":"cursor"}],"output":{"generics":["star"],"name":"presult"}}],[11,"description","","",126,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"sub"}}],[11,"new","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",127,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",127,{"inputs":[{"name":"cursor"}],"output":{"generics":["sub"],"name":"presult"}}],[11,"description","","",127,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"subeq"}}],[11,"new","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",128,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",128,{"inputs":[{"name":"cursor"}],"output":{"generics":["subeq"],"name":"presult"}}],[11,"description","","",128,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"underscore"}}],[11,"new","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",129,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",129,{"inputs":[{"name":"cursor"}],"output":{"generics":["underscore"],"name":"presult"}}],[11,"description","","",129,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"brace"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",130,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",130,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"bracket"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",131,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",131,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"paren"}}],[11,"default","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",132,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",132,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",133,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",133,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",133,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",134,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",134,{"inputs":[{"name":"cursor"}],"output":{"generics":["as"],"name":"presult"}}],[11,"description","","",134,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",134,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",135,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",135,{"inputs":[{"name":"cursor"}],"output":{"generics":["auto"],"name":"presult"}}],[11,"description","","",135,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",135,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",136,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",136,{"inputs":[{"name":"cursor"}],"output":{"generics":["box"],"name":"presult"}}],[11,"description","","",136,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",136,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",137,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",137,{"inputs":[{"name":"cursor"}],"output":{"generics":["break"],"name":"presult"}}],[11,"description","","",137,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",137,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"capself"}}],[11,"default","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",138,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",138,{"inputs":[{"name":"cursor"}],"output":{"generics":["capself"],"name":"presult"}}],[11,"description","","",138,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",138,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"catch"}}],[11,"default","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",139,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",139,{"inputs":[{"name":"cursor"}],"output":{"generics":["catch"],"name":"presult"}}],[11,"description","","",139,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",139,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",140,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",140,{"inputs":[{"name":"cursor"}],"output":{"generics":["const"],"name":"presult"}}],[11,"description","","",140,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",140,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"continue"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",141,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",141,{"inputs":[{"name":"cursor"}],"output":{"generics":["continue"],"name":"presult"}}],[11,"description","","",141,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",141,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",142,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",142,{"inputs":[{"name":"cursor"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"description","","",142,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",142,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"default","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",143,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",143,{"inputs":[{"name":"cursor"}],"output":{"generics":["default"],"name":"presult"}}],[11,"description","","",143,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",143,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"do"}}],[11,"default","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",144,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",144,{"inputs":[{"name":"cursor"}],"output":{"generics":["do"],"name":"presult"}}],[11,"description","","",144,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",144,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"dyn"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",145,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",145,{"inputs":[{"name":"cursor"}],"output":{"generics":["dyn"],"name":"presult"}}],[11,"description","","",145,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",145,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"else"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",146,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",146,{"inputs":[{"name":"cursor"}],"output":{"generics":["else"],"name":"presult"}}],[11,"description","","",146,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",146,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",147,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",147,{"inputs":[{"name":"cursor"}],"output":{"generics":["enum"],"name":"presult"}}],[11,"description","","",147,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",147,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"extern"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",148,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",148,{"inputs":[{"name":"cursor"}],"output":{"generics":["extern"],"name":"presult"}}],[11,"description","","",148,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",148,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",149,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",149,{"inputs":[{"name":"cursor"}],"output":{"generics":["fn"],"name":"presult"}}],[11,"description","","",149,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",149,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"for"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",150,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",150,{"inputs":[{"name":"cursor"}],"output":{"generics":["for"],"name":"presult"}}],[11,"description","","",150,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",150,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"if"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",151,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",151,{"inputs":[{"name":"cursor"}],"output":{"generics":["if"],"name":"presult"}}],[11,"description","","",151,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",151,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",152,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",152,{"inputs":[{"name":"cursor"}],"output":{"generics":["impl"],"name":"presult"}}],[11,"description","","",152,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",152,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"in"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",153,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",153,{"inputs":[{"name":"cursor"}],"output":{"generics":["in"],"name":"presult"}}],[11,"description","","",153,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",153,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"let"}}],[11,"default","","",154,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",154,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",154,{"inputs":[{"name":"cursor"}],"output":{"generics":["let"],"name":"presult"}}],[11,"description","","",154,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",154,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",155,{"inputs":[{"name":"cursor"}],"output":{"generics":["loop"],"name":"presult"}}],[11,"description","","",155,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",155,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",156,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",156,{"inputs":[{"name":"cursor"}],"output":{"generics":["macro"],"name":"presult"}}],[11,"description","","",156,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",156,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",157,{"inputs":[{"name":"cursor"}],"output":{"generics":["match"],"name":"presult"}}],[11,"description","","",157,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",157,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",158,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",158,{"inputs":[{"name":"cursor"}],"output":{"generics":["mod"],"name":"presult"}}],[11,"description","","",158,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",158,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",159,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",159,{"inputs":[{"name":"cursor"}],"output":{"generics":["move"],"name":"presult"}}],[11,"description","","",159,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",159,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"mut"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",160,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",160,{"inputs":[{"name":"cursor"}],"output":{"generics":["mut"],"name":"presult"}}],[11,"description","","",160,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",160,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"pub"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",161,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",161,{"inputs":[{"name":"cursor"}],"output":{"generics":["pub"],"name":"presult"}}],[11,"description","","",161,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",161,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",162,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",162,{"inputs":[{"name":"cursor"}],"output":{"generics":["ref"],"name":"presult"}}],[11,"description","","",162,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",162,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"return"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",163,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",163,{"inputs":[{"name":"cursor"}],"output":{"generics":["return"],"name":"presult"}}],[11,"description","","",163,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",163,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"self_"}}],[11,"default","","",164,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",164,{"inputs":[{"name":"cursor"}],"output":{"generics":["self_"],"name":"presult"}}],[11,"description","","",164,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",164,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",165,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",165,{"inputs":[{"name":"cursor"}],"output":{"generics":["static"],"name":"presult"}}],[11,"description","","",165,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",165,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",166,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",166,{"inputs":[{"name":"cursor"}],"output":{"generics":["struct"],"name":"presult"}}],[11,"description","","",166,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",166,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",167,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",167,{"inputs":[{"name":"cursor"}],"output":{"generics":["super"],"name":"presult"}}],[11,"description","","",167,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",167,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"default","","",168,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",168,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",168,{"inputs":[{"name":"cursor"}],"output":{"generics":["trait"],"name":"presult"}}],[11,"description","","",168,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",168,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",169,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",169,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"description","","",169,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",169,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",170,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",170,{"inputs":[{"name":"cursor"}],"output":{"generics":["union"],"name":"presult"}}],[11,"description","","",170,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",170,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"unsafe"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",171,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",171,{"inputs":[{"name":"cursor"}],"output":{"generics":["unsafe"],"name":"presult"}}],[11,"description","","",171,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",171,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"default","","",172,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",172,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",172,{"inputs":[{"name":"cursor"}],"output":{"generics":["use"],"name":"presult"}}],[11,"description","","",172,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",172,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"where"}}],[11,"default","","",173,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",173,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",173,{"inputs":[{"name":"cursor"}],"output":{"generics":["where"],"name":"presult"}}],[11,"description","","",173,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",173,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"while"}}],[11,"default","","",174,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",174,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",174,{"inputs":[{"name":"cursor"}],"output":{"generics":["while"],"name":"presult"}}],[11,"description","","",174,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",174,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"yield"}}],[11,"default","","",175,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",175,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",175,{"inputs":[{"name":"cursor"}],"output":{"generics":["yield"],"name":"presult"}}],[11,"description","","",175,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",175,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"parse_inner","syn","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_outer","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"inputs":[{"name":"self"}],"output":{"generics":["meta"],"name":"option"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"from","","",62,{"inputs":[{"name":"ident"}],"output":{"name":"meta"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metalist"}}],[11,"from","","",62,{"inputs":[{"name":"metalist"}],"output":{"name":"meta"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metanamevalue"}}],[11,"from","","",62,{"inputs":[{"name":"metanamevalue"}],"output":{"name":"meta"}}],[11,"to_tokens","","",62,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"name","","Returns the identifier that begins this structured meta item.",62,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"nestedmeta"}}],[11,"from","","",63,{"inputs":[{"name":"meta"}],"output":{"name":"nestedmeta"}}],[11,"from","","",63,{"inputs":[{"name":"lit"}],"output":{"name":"nestedmeta"}}],[11,"to_tokens","","",63,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",6,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_named","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_unnamed","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",65,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",65,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldsnamed"}}],[11,"from","","",64,{"inputs":[{"name":"fieldsnamed"}],"output":{"name":"fields"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldsunnamed"}}],[11,"from","","",64,{"inputs":[{"name":"fieldsunnamed"}],"output":{"name":"fields"}}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",64,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"iter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vispublic"}}],[11,"from","","",65,{"inputs":[{"name":"vispublic"}],"output":{"name":"visibility"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viscrate"}}],[11,"from","","",65,{"inputs":[{"name":"viscrate"}],"output":{"name":"visibility"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"visrestricted"}}],[11,"from","","",65,{"inputs":[{"name":"visrestricted"}],"output":{"name":"visibility"}}],[11,"to_tokens","","",65,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",66,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",66,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",14,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",14,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",15,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",15,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",16,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",16,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"exprbox"}}],[11,"from","","",66,{"inputs":[{"name":"exprbox"}],"output":{"name":"expr"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"exprinplace"}}],[11,"from","","",66,{"inputs":[{"name":"exprinplace"}],"output":{"name":"expr"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"exprarray"}}],[11,"from","","",66,{"inputs":[{"name":"exprarray"}],"output":{"name":"expr"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exprcall"}}],[11,"from","","",66,{"inputs":[{"name":"exprcall"}],"output":{"name":"expr"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"exprmethodcall"}}],[11,"from","","",66,{"inputs":[{"name":"exprmethodcall"}],"output":{"name":"expr"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"exprtuple"}}],[11,"from","","",66,{"inputs":[{"name":"exprtuple"}],"output":{"name":"expr"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"exprbinary"}}],[11,"from","","",66,{"inputs":[{"name":"exprbinary"}],"output":{"name":"expr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"exprunary"}}],[11,"from","","",66,{"inputs":[{"name":"exprunary"}],"output":{"name":"expr"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprlit"}}],[11,"from","","",66,{"inputs":[{"name":"exprlit"}],"output":{"name":"expr"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exprcast"}}],[11,"from","","",66,{"inputs":[{"name":"exprcast"}],"output":{"name":"expr"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"exprtype"}}],[11,"from","","",66,{"inputs":[{"name":"exprtype"}],"output":{"name":"expr"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"exprif"}}],[11,"from","","",66,{"inputs":[{"name":"exprif"}],"output":{"name":"expr"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"expriflet"}}],[11,"from","","",66,{"inputs":[{"name":"expriflet"}],"output":{"name":"expr"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"exprwhile"}}],[11,"from","","",66,{"inputs":[{"name":"exprwhile"}],"output":{"name":"expr"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"exprwhilelet"}}],[11,"from","","",66,{"inputs":[{"name":"exprwhilelet"}],"output":{"name":"expr"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"exprforloop"}}],[11,"from","","",66,{"inputs":[{"name":"exprforloop"}],"output":{"name":"expr"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"exprloop"}}],[11,"from","","",66,{"inputs":[{"name":"exprloop"}],"output":{"name":"expr"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"exprmatch"}}],[11,"from","","",66,{"inputs":[{"name":"exprmatch"}],"output":{"name":"expr"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"exprclosure"}}],[11,"from","","",66,{"inputs":[{"name":"exprclosure"}],"output":{"name":"expr"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"exprunsafe"}}],[11,"from","","",66,{"inputs":[{"name":"exprunsafe"}],"output":{"name":"expr"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"exprblock"}}],[11,"from","","",66,{"inputs":[{"name":"exprblock"}],"output":{"name":"expr"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"exprassign"}}],[11,"from","","",66,{"inputs":[{"name":"exprassign"}],"output":{"name":"expr"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"exprassignop"}}],[11,"from","","",66,{"inputs":[{"name":"exprassignop"}],"output":{"name":"expr"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"exprfield"}}],[11,"from","","",66,{"inputs":[{"name":"exprfield"}],"output":{"name":"expr"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exprindex"}}],[11,"from","","",66,{"inputs":[{"name":"exprindex"}],"output":{"name":"expr"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"exprrange"}}],[11,"from","","",66,{"inputs":[{"name":"exprrange"}],"output":{"name":"expr"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exprpath"}}],[11,"from","","",66,{"inputs":[{"name":"exprpath"}],"output":{"name":"expr"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"exprreference"}}],[11,"from","","",66,{"inputs":[{"name":"exprreference"}],"output":{"name":"expr"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"exprbreak"}}],[11,"from","","",66,{"inputs":[{"name":"exprbreak"}],"output":{"name":"expr"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"exprcontinue"}}],[11,"from","","",66,{"inputs":[{"name":"exprcontinue"}],"output":{"name":"expr"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"exprreturn"}}],[11,"from","","",66,{"inputs":[{"name":"exprreturn"}],"output":{"name":"expr"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"exprmacro"}}],[11,"from","","",66,{"inputs":[{"name":"exprmacro"}],"output":{"name":"expr"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"exprstruct"}}],[11,"from","","",66,{"inputs":[{"name":"exprstruct"}],"output":{"name":"expr"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"exprrepeat"}}],[11,"from","","",66,{"inputs":[{"name":"exprrepeat"}],"output":{"name":"expr"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"exprparen"}}],[11,"from","","",66,{"inputs":[{"name":"exprparen"}],"output":{"name":"expr"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"exprgroup"}}],[11,"from","","",66,{"inputs":[{"name":"exprgroup"}],"output":{"name":"expr"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"exprtry"}}],[11,"from","","",66,{"inputs":[{"name":"exprtry"}],"output":{"name":"expr"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"exprcatch"}}],[11,"from","","",66,{"inputs":[{"name":"exprcatch"}],"output":{"name":"expr"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"expryield"}}],[11,"from","","",66,{"inputs":[{"name":"expryield"}],"output":{"name":"expr"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exprverbatim"}}],[11,"from","","",66,{"inputs":[{"name":"exprverbatim"}],"output":{"name":"expr"}}],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"index"}}],[11,"parse","","",22,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",22,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",68,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",68,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",23,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",23,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",20,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",28,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",28,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",70,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",70,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",27,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",27,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",69,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",69,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",21,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",21,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",29,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",29,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",71,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",71,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",207,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",208,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",209,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",69,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"default","","",22,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"genericparam"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"typeparam"}}],[11,"from","","",68,{"inputs":[{"name":"typeparam"}],"output":{"name":"genericparam"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"from","","",68,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"genericparam"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"constparam"}}],[11,"from","","",68,{"inputs":[{"name":"constparam"}],"output":{"name":"genericparam"}}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",22,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"implgenerics"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"typegenerics"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",22,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",208,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"boundlifetimes"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"boundlifetimes"}}],[11,"new","","",23,{"inputs":[{"name":"lifetime"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"typeparambound"}}],[11,"from","","",70,{"inputs":[{"name":"traitbound"}],"output":{"name":"typeparambound"}}],[11,"from","","",70,{"inputs":[{"name":"lifetime"}],"output":{"name":"typeparambound"}}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"traitbound"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"predicatetype"}}],[11,"from","","",71,{"inputs":[{"name":"predicatetype"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"predicatelifetime"}}],[11,"from","","",71,{"inputs":[{"name":"predicatelifetime"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"predicateeq"}}],[11,"from","","",71,{"inputs":[{"name":"predicateeq"}],"output":{"name":"wherepredicate"}}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",210,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",210,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",210,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an ident with the given string representation.",210,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"span","","",210,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",210,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"from","","",210,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",210,{"inputs":[{"name":"self_"}],"output":{"name":"self"}}],[11,"from","","",210,{"inputs":[{"name":"capself"}],"output":{"name":"self"}}],[11,"from","","",210,{"inputs":[{"name":"super"}],"output":{"name":"self"}}],[11,"from","","",210,{"inputs":[{"name":"crate"}],"output":{"name":"self"}}],[11,"from","","",210,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",210,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",210,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"hash","","",210,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",211,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",211,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",211,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"new","","",211,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"span","","",211,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",211,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",211,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"hash","","",211,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",74,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",74,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",212,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",212,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",213,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",213,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",214,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",214,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",215,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",215,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",216,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",216,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",217,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",217,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",30,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",30,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",212,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",213,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",214,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",217,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",74,{"inputs":[{"name":"literal"}],"output":{"name":"self"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"litstr"}}],[11,"from","","",74,{"inputs":[{"name":"litstr"}],"output":{"name":"lit"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"litbytestr"}}],[11,"from","","",74,{"inputs":[{"name":"litbytestr"}],"output":{"name":"lit"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"litbyte"}}],[11,"from","","",74,{"inputs":[{"name":"litbyte"}],"output":{"name":"lit"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"litchar"}}],[11,"from","","",74,{"inputs":[{"name":"litchar"}],"output":{"name":"lit"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"litint"}}],[11,"from","","",74,{"inputs":[{"name":"litint"}],"output":{"name":"lit"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"litfloat"}}],[11,"from","","",74,{"inputs":[{"name":"litfloat"}],"output":{"name":"lit"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"litbool"}}],[11,"from","","",74,{"inputs":[{"name":"litbool"}],"output":{"name":"lit"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"litverbatim"}}],[11,"from","","",74,{"inputs":[{"name":"litverbatim"}],"output":{"name":"lit"}}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","",212,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",212,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",212,{"inputs":[{"name":"self"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"span","","",212,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",212,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",213,null],[11,"value","","",213,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"span","","",213,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",213,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",214,{"inputs":[{"name":"u8"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",214,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"span","","",214,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",215,{"inputs":[{"name":"char"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",215,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"span","","",215,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",215,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",216,{"inputs":[{"name":"u64"},{"name":"intsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",216,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"suffix","","",216,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"span","","",216,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",216,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",217,{"inputs":[{"name":"f64"},{"name":"floatsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",217,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"suffix","","",217,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"span","","",217,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",217,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"span","","",31,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",31,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"parse","","",32,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",32,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"macrodelimiter"}}],[11,"parse","","",36,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",36,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"datastruct"}}],[11,"from","","",77,{"inputs":[{"name":"datastruct"}],"output":{"name":"data"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dataenum"}}],[11,"from","","",77,{"inputs":[{"name":"dataenum"}],"output":{"name":"data"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dataunion"}}],[11,"from","","",77,{"inputs":[{"name":"dataunion"}],"output":{"name":"data"}}],[11,"parse_binop","","",78,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",79,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",79,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"parse","","",82,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",82,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",82,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",50,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",50,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",39,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",39,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",48,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",48,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",49,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",49,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",40,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",40,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",45,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",45,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",43,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",43,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",52,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",44,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",44,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",81,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",81,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",51,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",42,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",42,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",41,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",41,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",46,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",46,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",38,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",38,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",80,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",80,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",37,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",37,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",80,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"typeslice"}}],[11,"from","","",82,{"inputs":[{"name":"typeslice"}],"output":{"name":"type"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"typearray"}}],[11,"from","","",82,{"inputs":[{"name":"typearray"}],"output":{"name":"type"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"typeptr"}}],[11,"from","","",82,{"inputs":[{"name":"typeptr"}],"output":{"name":"type"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"typereference"}}],[11,"from","","",82,{"inputs":[{"name":"typereference"}],"output":{"name":"type"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"typebarefn"}}],[11,"from","","",82,{"inputs":[{"name":"typebarefn"}],"output":{"name":"type"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"typenever"}}],[11,"from","","",82,{"inputs":[{"name":"typenever"}],"output":{"name":"type"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"typetuple"}}],[11,"from","","",82,{"inputs":[{"name":"typetuple"}],"output":{"name":"type"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"typepath"}}],[11,"from","","",82,{"inputs":[{"name":"typepath"}],"output":{"name":"type"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"typetraitobject"}}],[11,"from","","",82,{"inputs":[{"name":"typetraitobject"}],"output":{"name":"type"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typeimpltrait"}}],[11,"from","","",82,{"inputs":[{"name":"typeimpltrait"}],"output":{"name":"type"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"typeparen"}}],[11,"from","","",82,{"inputs":[{"name":"typeparen"}],"output":{"name":"type"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"typegroup"}}],[11,"from","","",82,{"inputs":[{"name":"typegroup"}],"output":{"name":"type"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"typeinfer"}}],[11,"from","","",82,{"inputs":[{"name":"typeinfer"}],"output":{"name":"type"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"typemacro"}}],[11,"from","","",82,{"inputs":[{"name":"typemacro"}],"output":{"name":"type"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"typeverbatim"}}],[11,"from","","",82,{"inputs":[{"name":"typeverbatim"}],"output":{"name":"type"}}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"barefnargname"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[11,"parse","","",57,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",57,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",83,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",54,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",54,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",56,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",56,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",58,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",58,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",55,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",55,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_mod_style","","",57,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"global","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pathtokens"}}],[11,"from","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"from","","",58,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"patharguments"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"genericargument"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",218,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",218,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",218,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",219,{"inputs":[],"output":{"name":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",219,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"option"}}],[11,"term","","If the cursor is pointing at a `Term`, returns it along with a cursor pointing at the next `TokenTree`.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"op","","If the cursor is pointing at an `Op`, returns it along with a cursor pointing at the next `TokenTree`.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",219,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",219,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[6,"PResult","","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",220,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","A short name of the type being parsed.",220,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",221,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",221,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",221,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",221,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",222,null],[13,"End","","",222,null],[11,"to_tokens","","",223,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",222,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",223,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"insert","","Inserts an element at position `index`.",223,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",223,null],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,null],[11,"index","","",223,null],[11,"index_mut","","",223,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",230,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","syn::synom","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",231,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[3,"PathTokens"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Underscore"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprField"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"Ident"],[3,"Lifetime"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[8,"Synom"],[8,"Parser"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[3,"ParseError"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
